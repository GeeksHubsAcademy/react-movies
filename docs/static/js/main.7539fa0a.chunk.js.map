{"version":3,"sources":["components/Navigation.jsx","components/Footer.jsx","components/NotFound.jsx","components/MovieCard.jsx","components/MoviesDisplay.jsx","views/MovieDetail.jsx","views/MovieList.jsx","App.js","serviceWorker.js","index.js"],"names":["Navigation","react_default","a","createElement","className","es","to","Footer","NotFound","MovieCard","props","data","id","style","backgroundImage","concat","backdrop_path","title","MovieDisplay","this","movies","map","movie","src_components_MovieCard","key","Component","MovieDetail","state","similar","_this2","url","Axios","get","then","res","setState","catch","navigate","results","getData","adult","vote_count","vote_average","homepage","overview","genres","budget","revenue","popularity","release_date","poster_path","src","alt","href","target","rel","el","name","components_MoviesDisplay","React","MovieList","extractType","type","_this","_type","axios","console","log","newType","getMovies","App","src_components_Navigation","src_views_MovieDetail","path","src_views_MovieList","components_NotFound","default","from","noThrow","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7539fa0a.chunk.js","sourcesContent":["import React from 'react';\n\nimport {Link } from '@reach/router';\n\nimport './Navigation.scss'\n\nconst Navigation = () => (\n  <nav className=\"navigation\">\n    <Link to='/movies/top_rated'>top rated</Link>\n    <Link to='/movies/upcoming'>upcoming</Link>\n    <Link to='/movies/popular'>popular</Link>\n  </nav>\n);\n\nexport default Navigation;\n","import React from 'react';\n\nimport { Link } from '@reach/router';\nimport './Navigation.scss';\n\nconst Footer = () => (\n  <footer className='navigation'>\n    <Link to='/movies/top_rated'>top rated</Link>\n    <Link to='/movies/upcoming'>upcoming</Link>\n    <Link to='/movies/popular'>popular</Link>\n  </footer>\n);\n\nexport default Footer;\n","import React from 'react';\n\nimport { Link } from '@reach/router';\n\nconst NotFound = () => (\n  <section className='404'>\n    <h1>Película no encontrada</h1>\n    <h2>404</h2>\n    <Link to=\"/movies/popular\">Go to popular</Link>\n  </section>\n);\n\nexport default NotFound;\n","import React from 'react';\nimport { Link } from '@reach/router';\n\n\nimport './MovieCard.scss'\n\nconst MovieCard = props => (\n  <Link className='movieCard' to={'/movie/' + props.data.id} style={{ backgroundImage: `url(https://image.tmdb.org/t/p/w300/${props.data.backdrop_path})` }}>\n    <h1>{props.data.title} </h1>\n    {/* <p>{props.data.overview}</p> */}\n  </Link>\n);\n\nexport default MovieCard;\n","import React, { Component } from 'react';\n\nimport './MoviesDisplay.scss';\n\nimport MovieCard from './MovieCard';\n\nclass MovieDisplay extends Component {\n\n  render() {\n      return (\n        <div className='movieDisplay'>\n          <h1>{this.props.title}</h1>\n          <div className='movies'>\n            {this.props.movies.map(movie => (\n              <MovieCard key={movie.id} data={movie} />\n            ))}\n          </div>\n        </div>\n      );\n\n\n  }\n}\n\n\nexport default MovieDisplay;\n","import React from 'react';\nimport Axios from 'axios';\n\nimport './MovieDetail.scss'\nimport MovieDisplay from '../components/MoviesDisplay';\n\n\nclass MovieDetail extends React.Component {\n  state = {\n    movie: null,\n    similar: [],\n    id:null\n  };\n  getData() {\n    const url = `https://api.themoviedb.org/3/movie/${this.props.id}?api_key=323112ea2281b9eb70f319f4df422c6b&language=en-US`;\n    const similar = `https://api.themoviedb.org/3/movie/${this.props.id}/similar?api_key=323112ea2281b9eb70f319f4df422c6b&language=en-US`;\n\n    Axios.get(url)\n      .then(res => this.setState({ movie: res.data, id: this.props.id }))\n      .catch(() => this.props.navigate('/notFound'));\n\n    Axios.get(similar)\n      .then(res => {\n        this.setState({ similar: res.data.results });\n      })\n  }\n\n  render() {\n\n    if(this.props.id !== this.state.id ) {\n      this.getData();\n       return <h1>loading</h1>;\n    } else {\n      let { movie } = this.state;\n\n      if (!movie)  return <h1>loading</h1>;\n\n      let { adult, vote_count, vote_average, homepage, title, backdrop_path, overview, genres, budget, revenue, popularity, release_date, poster_path } = movie;\n      return (\n        <section className='movieDetail' style={{ backgroundImage: `url(https://image.tmdb.org/t/p/w600_and_h900_bestv2/${backdrop_path})` }}>\n          <div className='movie'>\n            <img className='poster' src={'https://image.tmdb.org/t/p/w300/' + poster_path} alt='' />\n\n            <div className='data'>\n              <h1>{title}</h1>\n              <h1>{adult ? '♦️♦️♦️' : ''}</h1>\n              <div className='release'>{release_date}</div>\n              <a href={homepage} target='_blank' rel='noopener noreferrer'>\n                {homepage}\n              </a>\n              <p>{overview}</p>\n              <div className='genres'>\n                {genres.map(el => (\n                  <span className='genre' key={el.id}>\n                    {el.name}\n                  </span>\n                ))}\n              </div>\n\n              <div className='moreInfo'>\n                <div className='vote_average'>\n                  Vote average: <span className='big'>{vote_average}</span>\n                </div>\n                <div className='vote_count'>Vote count: {vote_count}</div>\n                <div className='popularity'>Popularity: {popularity}</div>\n                <div className='budget'>Budget: $ {budget}</div>\n                <div className='revenue'>Revenue: $ {revenue}</div>\n              </div>\n            </div>\n          </div>\n          <div className='related'>\n            <MovieDisplay movies={this.state.similar} title='Related:' />\n          </div>\n        </section>\n      );\n    }\n\n\n  }\n}\n\nexport default MovieDetail;\n","import React, { Component } from 'react';\n\nimport axios from 'axios';\nimport './MovieList.scss';\n\n\nimport MoviesDisplay from '../components/MoviesDisplay';\nclass MovieList extends Component {\n  extractType = () => {\n    const type = this.props.type\n\n    if (type === 'top_rated' || type === 'upcoming' || type === 'popular') {\n      return type;\n    } else {\n      return 'popular';\n    }\n  };\n\n  state = {\n    movies: [],\n    type:'',\n  };\n\n  getMovies(type) {\n    let url = (_type) => `https://api.themoviedb.org/3/movie/${_type}?api_key=323112ea2281b9eb70f319f4df422c6b`;\n\n    return axios.get(url(type)).then(res => this.setState({ movies: res.data.results, type:type }));\n  }\n\n  render() {\nconsole.log(this.props);\n\n    const newType = this.extractType()\n    if (newType !== this.state.type) {\n      this.getMovies(newType);\n      return <h1>loading movies</h1>\n    } else {\n      return (\n        <section className='MovieList'>\n          <h1> {this.state.type} movies</h1>\n          <MoviesDisplay movies={this.state.movies} />\n        </section>\n      );\n    }\n\n\n  }\n}\n\n// const MovieList = props => <section>MovieList {JSON.stringify(props)}</section>;\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport { Router, Redirect } from '@reach/router';\nimport Navigation from './components/Navigation';\nimport Footer from './components/Footer';\nimport NotFound from './components/NotFound';\n\nimport MovieDetail from './views/MovieDetail';\nimport MovieList from './views/MovieList';\n\nimport './App.scss'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='app'>\n        <Navigation />\n        <Router className='main' >\n          <MovieDetail path='movie/:id' />\n          <MovieList path='movies/:type' />\n          <NotFound path='notFound' />\n          <Redirect default from='*' to='movies/popular' noThrow />\n        </Router>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}